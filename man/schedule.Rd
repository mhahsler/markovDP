% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/schedule.R
\name{schedule}
\alias{schedule}
\alias{schedule_exp}
\alias{schedule_exp2}
\alias{schedule_log}
\alias{schedule_linear}
\alias{schedule_harmonic}
\title{Schedules to Reduce Alpha, Epsilon and Other Parameters}
\usage{
schedule_exp(start, decay)

schedule_exp2(start, basis)

schedule_log(start)

schedule_linear(start, end, n)

schedule_harmonic(start, n)
}
\arguments{
\item{start}{start value for the schedule.}

\item{decay}{decay factor for exponential schedules.}

\item{basis}{basis for exponential schedules.}

\item{end}{end value for the schedule.}

\item{n}{number of steps (e.g., epochs) for the schedule.}
}
\description{
Several schedule functions to reduce learning parameters are available using
generator functions.
}
\details{
Several learning parameters need to be reduced during learning to ensure
convergence. We provide several schedule function generators
that reduce learning
parameters after each processed episode or according to the number of
times a state-action combination was tried.

Here are the definitions of the available schedules:
\itemize{
\item schedule_exp : \code{function(t) start * exp(-decay * (t - 1))}
\item schedule_exp2 : \code{function(t) start * basis^(t - 1)}
\item schedule_log : \code{function(t) pmin(start/log(1 + t), start)}
\item schedule_linear : \verb{step <- (start - end)/n function(t) start - t * step}
\item schedule_harmonic : \code{function(t) pmin(start/t, 1)}
}

\code{t} is the time step, episode number or count starting with 1.
}
\examples{
# create an exponential  schedule function
s_exp <- schedule_exp(1, decay = .1)
s_exp

# plot the schedule for 100 episodes.
episode <- seq_len(100)
plot(x = episode, s_exp(1:100), type = "l")

# compare some schedule examples
schedules <- cbind(
  `exp decay = 0.1` = schedule_exp(1, decay = .1)(1:100),
  `exp decay = 0.01` = schedule_exp(1, decay = .01)(1:100),
  `exp basis = 0.9` = schedule_exp2(1, basis = .9)(1:100),
  `linear` = schedule_linear(1, end = 0, n = 100)(1:100),
  `log` = schedule_log(1)(1:100),
  `harmonic` = schedule_harmonic(1, n = 100)(1:100),
  `harmonic start = 10` = schedule_harmonic(10, n = 100)(1:100)
  )
 
matplot(schedules, type = "l", 
        col = 1:ncol(schedules),
        lty = 1:ncol(schedules)
        )
legend("topright", 
        legend = colnames(schedules), 
        col = 1:ncol(schedules), 
        lty = 1:ncol(schedules),
        cex = 0.8
        )
}
\seealso{
Other solver: 
\code{\link{solve_MDP}()},
\code{\link{solve_MDP_APPROX}()},
\code{\link{solve_MDP_DP}()},
\code{\link{solve_MDP_LP}()},
\code{\link{solve_MDP_MC}()},
\code{\link{solve_MDP_PG}()},
\code{\link{solve_MDP_SAMP}()},
\code{\link{solve_MDP_TD}()}
}
\concept{solver}
