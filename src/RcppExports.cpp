// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// QV_cpp
NumericVector QV_cpp(NumericVector V, NumericMatrix P, NumericMatrix R, double GAMMA);
RcppExport SEXP _markovDP_QV_cpp(SEXP VSEXP, SEXP PSEXP, SEXP RSEXP, SEXP GAMMASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type P(PSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type GAMMA(GAMMASEXP);
    rcpp_result_gen = Rcpp::wrap(QV_cpp(V, P, R, GAMMA));
    return rcpp_result_gen;
END_RCPP
}
// round_stochastic_cpp
NumericVector round_stochastic_cpp(const NumericVector& x, int digits);
RcppExport SEXP _markovDP_round_stochastic_cpp(SEXP xSEXP, SEXP digitsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type digits(digitsSEXP);
    rcpp_result_gen = Rcpp::wrap(round_stochastic_cpp(x, digits));
    return rcpp_result_gen;
END_RCPP
}
// veccrossprod
NumericVector veccrossprod(const NumericMatrix& A, const NumericVector& b);
RcppExport SEXP _markovDP_veccrossprod(SEXP ASEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(veccrossprod(A, b));
    return rcpp_result_gen;
END_RCPP
}
// vecprod
NumericVector vecprod(const NumericMatrix& A, const NumericVector& b);
RcppExport SEXP _markovDP_vecprod(SEXP ASEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(vecprod(A, b));
    return rcpp_result_gen;
END_RCPP
}
// sample_MDP_cpp
List sample_MDP_cpp(const List& model, const int n, const NumericVector& start, const int horizon, const double disc, const bool trajectories, const double epsilon, const bool exploring_starts, const bool verbose);
RcppExport SEXP _markovDP_sample_MDP_cpp(SEXP modelSEXP, SEXP nSEXP, SEXP startSEXP, SEXP horizonSEXP, SEXP discSEXP, SEXP trajectoriesSEXP, SEXP epsilonSEXP, SEXP exploring_startsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type start(startSEXP);
    Rcpp::traits::input_parameter< const int >::type horizon(horizonSEXP);
    Rcpp::traits::input_parameter< const double >::type disc(discSEXP);
    Rcpp::traits::input_parameter< const bool >::type trajectories(trajectoriesSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type exploring_starts(exploring_startsSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_MDP_cpp(model, n, start, horizon, disc, trajectories, epsilon, exploring_starts, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_markovDP_QV_cpp", (DL_FUNC) &_markovDP_QV_cpp, 4},
    {"_markovDP_round_stochastic_cpp", (DL_FUNC) &_markovDP_round_stochastic_cpp, 2},
    {"_markovDP_veccrossprod", (DL_FUNC) &_markovDP_veccrossprod, 2},
    {"_markovDP_vecprod", (DL_FUNC) &_markovDP_vecprod, 2},
    {"_markovDP_sample_MDP_cpp", (DL_FUNC) &_markovDP_sample_MDP_cpp, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_markovDP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
